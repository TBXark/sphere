// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tbxark/go-base-api/pkg/dao/ent/keyvaluestore"
)

// KeyValueStore is the model entity for the KeyValueStore schema.
type KeyValueStore struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 键
	Key string `json:"key,omitempty"`
	// 值
	Value        []byte `json:"value,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KeyValueStore) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case keyvaluestore.FieldValue:
			values[i] = new([]byte)
		case keyvaluestore.FieldID, keyvaluestore.FieldCreatedAt, keyvaluestore.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case keyvaluestore.FieldKey:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KeyValueStore fields.
func (kvs *KeyValueStore) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case keyvaluestore.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kvs.ID = int(value.Int64)
		case keyvaluestore.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				kvs.CreatedAt = value.Int64
			}
		case keyvaluestore.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				kvs.UpdatedAt = value.Int64
			}
		case keyvaluestore.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				kvs.Key = value.String
			}
		case keyvaluestore.FieldValue:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value != nil {
				kvs.Value = *value
			}
		default:
			kvs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the KeyValueStore.
// This includes values selected through modifiers, order, etc.
func (kvs *KeyValueStore) GetValue(name string) (ent.Value, error) {
	return kvs.selectValues.Get(name)
}

// Update returns a builder for updating this KeyValueStore.
// Note that you need to call KeyValueStore.Unwrap() before calling this method if this KeyValueStore
// was returned from a transaction, and the transaction was committed or rolled back.
func (kvs *KeyValueStore) Update() *KeyValueStoreUpdateOne {
	return NewKeyValueStoreClient(kvs.config).UpdateOne(kvs)
}

// Unwrap unwraps the KeyValueStore entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kvs *KeyValueStore) Unwrap() *KeyValueStore {
	_tx, ok := kvs.config.driver.(*txDriver)
	if !ok {
		panic("ent: KeyValueStore is not a transactional entity")
	}
	kvs.config.driver = _tx.drv
	return kvs
}

// String implements the fmt.Stringer.
func (kvs *KeyValueStore) String() string {
	var builder strings.Builder
	builder.WriteString("KeyValueStore(")
	builder.WriteString(fmt.Sprintf("id=%v, ", kvs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", kvs.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", kvs.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(kvs.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", kvs.Value))
	builder.WriteByte(')')
	return builder.String()
}

// KeyValueStores is a parsable slice of KeyValueStore.
type KeyValueStores []*KeyValueStore

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tbxark/go-base-api/pkg/dao/ent/predicate"
	"github.com/tbxark/go-base-api/pkg/dao/ent/userplatform"
)

// UserPlatformUpdate is the builder for updating UserPlatform entities.
type UserPlatformUpdate struct {
	config
	hooks     []Hook
	mutation  *UserPlatformMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserPlatformUpdate builder.
func (upu *UserPlatformUpdate) Where(ps ...predicate.UserPlatform) *UserPlatformUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetUpdatedAt sets the "updated_at" field.
func (upu *UserPlatformUpdate) SetUpdatedAt(i int64) *UserPlatformUpdate {
	upu.mutation.ResetUpdatedAt()
	upu.mutation.SetUpdatedAt(i)
	return upu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (upu *UserPlatformUpdate) AddUpdatedAt(i int64) *UserPlatformUpdate {
	upu.mutation.AddUpdatedAt(i)
	return upu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (upu *UserPlatformUpdate) ClearUpdatedAt() *UserPlatformUpdate {
	upu.mutation.ClearUpdatedAt()
	return upu
}

// SetUserID sets the "user_id" field.
func (upu *UserPlatformUpdate) SetUserID(i int) *UserPlatformUpdate {
	upu.mutation.ResetUserID()
	upu.mutation.SetUserID(i)
	return upu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upu *UserPlatformUpdate) SetNillableUserID(i *int) *UserPlatformUpdate {
	if i != nil {
		upu.SetUserID(*i)
	}
	return upu
}

// AddUserID adds i to the "user_id" field.
func (upu *UserPlatformUpdate) AddUserID(i int) *UserPlatformUpdate {
	upu.mutation.AddUserID(i)
	return upu
}

// SetPlatform sets the "platform" field.
func (upu *UserPlatformUpdate) SetPlatform(s string) *UserPlatformUpdate {
	upu.mutation.SetPlatform(s)
	return upu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (upu *UserPlatformUpdate) SetNillablePlatform(s *string) *UserPlatformUpdate {
	if s != nil {
		upu.SetPlatform(*s)
	}
	return upu
}

// SetPlatformID sets the "platform_id" field.
func (upu *UserPlatformUpdate) SetPlatformID(s string) *UserPlatformUpdate {
	upu.mutation.SetPlatformID(s)
	return upu
}

// SetNillablePlatformID sets the "platform_id" field if the given value is not nil.
func (upu *UserPlatformUpdate) SetNillablePlatformID(s *string) *UserPlatformUpdate {
	if s != nil {
		upu.SetPlatformID(*s)
	}
	return upu
}

// SetSecondID sets the "second_id" field.
func (upu *UserPlatformUpdate) SetSecondID(s string) *UserPlatformUpdate {
	upu.mutation.SetSecondID(s)
	return upu
}

// SetNillableSecondID sets the "second_id" field if the given value is not nil.
func (upu *UserPlatformUpdate) SetNillableSecondID(s *string) *UserPlatformUpdate {
	if s != nil {
		upu.SetSecondID(*s)
	}
	return upu
}

// ClearSecondID clears the value of the "second_id" field.
func (upu *UserPlatformUpdate) ClearSecondID() *UserPlatformUpdate {
	upu.mutation.ClearSecondID()
	return upu
}

// Mutation returns the UserPlatformMutation object of the builder.
func (upu *UserPlatformUpdate) Mutation() *UserPlatformMutation {
	return upu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPlatformUpdate) Save(ctx context.Context) (int, error) {
	upu.defaults()
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPlatformUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPlatformUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPlatformUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upu *UserPlatformUpdate) defaults() {
	if _, ok := upu.mutation.UpdatedAt(); !ok && !upu.mutation.UpdatedAtCleared() {
		v := userplatform.UpdateDefaultUpdatedAt()
		upu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upu *UserPlatformUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserPlatformUpdate {
	upu.modifiers = append(upu.modifiers, modifiers...)
	return upu
}

func (upu *UserPlatformUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userplatform.Table, userplatform.Columns, sqlgraph.NewFieldSpec(userplatform.FieldID, field.TypeInt))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if upu.mutation.CreatedAtCleared() {
		_spec.ClearField(userplatform.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := upu.mutation.UpdatedAt(); ok {
		_spec.SetField(userplatform.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(userplatform.FieldUpdatedAt, field.TypeInt64, value)
	}
	if upu.mutation.UpdatedAtCleared() {
		_spec.ClearField(userplatform.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := upu.mutation.UserID(); ok {
		_spec.SetField(userplatform.FieldUserID, field.TypeInt, value)
	}
	if value, ok := upu.mutation.AddedUserID(); ok {
		_spec.AddField(userplatform.FieldUserID, field.TypeInt, value)
	}
	if value, ok := upu.mutation.Platform(); ok {
		_spec.SetField(userplatform.FieldPlatform, field.TypeString, value)
	}
	if value, ok := upu.mutation.PlatformID(); ok {
		_spec.SetField(userplatform.FieldPlatformID, field.TypeString, value)
	}
	if value, ok := upu.mutation.SecondID(); ok {
		_spec.SetField(userplatform.FieldSecondID, field.TypeString, value)
	}
	if upu.mutation.SecondIDCleared() {
		_spec.ClearField(userplatform.FieldSecondID, field.TypeString)
	}
	_spec.AddModifiers(upu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userplatform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserPlatformUpdateOne is the builder for updating a single UserPlatform entity.
type UserPlatformUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserPlatformMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (upuo *UserPlatformUpdateOne) SetUpdatedAt(i int64) *UserPlatformUpdateOne {
	upuo.mutation.ResetUpdatedAt()
	upuo.mutation.SetUpdatedAt(i)
	return upuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (upuo *UserPlatformUpdateOne) AddUpdatedAt(i int64) *UserPlatformUpdateOne {
	upuo.mutation.AddUpdatedAt(i)
	return upuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (upuo *UserPlatformUpdateOne) ClearUpdatedAt() *UserPlatformUpdateOne {
	upuo.mutation.ClearUpdatedAt()
	return upuo
}

// SetUserID sets the "user_id" field.
func (upuo *UserPlatformUpdateOne) SetUserID(i int) *UserPlatformUpdateOne {
	upuo.mutation.ResetUserID()
	upuo.mutation.SetUserID(i)
	return upuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upuo *UserPlatformUpdateOne) SetNillableUserID(i *int) *UserPlatformUpdateOne {
	if i != nil {
		upuo.SetUserID(*i)
	}
	return upuo
}

// AddUserID adds i to the "user_id" field.
func (upuo *UserPlatformUpdateOne) AddUserID(i int) *UserPlatformUpdateOne {
	upuo.mutation.AddUserID(i)
	return upuo
}

// SetPlatform sets the "platform" field.
func (upuo *UserPlatformUpdateOne) SetPlatform(s string) *UserPlatformUpdateOne {
	upuo.mutation.SetPlatform(s)
	return upuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (upuo *UserPlatformUpdateOne) SetNillablePlatform(s *string) *UserPlatformUpdateOne {
	if s != nil {
		upuo.SetPlatform(*s)
	}
	return upuo
}

// SetPlatformID sets the "platform_id" field.
func (upuo *UserPlatformUpdateOne) SetPlatformID(s string) *UserPlatformUpdateOne {
	upuo.mutation.SetPlatformID(s)
	return upuo
}

// SetNillablePlatformID sets the "platform_id" field if the given value is not nil.
func (upuo *UserPlatformUpdateOne) SetNillablePlatformID(s *string) *UserPlatformUpdateOne {
	if s != nil {
		upuo.SetPlatformID(*s)
	}
	return upuo
}

// SetSecondID sets the "second_id" field.
func (upuo *UserPlatformUpdateOne) SetSecondID(s string) *UserPlatformUpdateOne {
	upuo.mutation.SetSecondID(s)
	return upuo
}

// SetNillableSecondID sets the "second_id" field if the given value is not nil.
func (upuo *UserPlatformUpdateOne) SetNillableSecondID(s *string) *UserPlatformUpdateOne {
	if s != nil {
		upuo.SetSecondID(*s)
	}
	return upuo
}

// ClearSecondID clears the value of the "second_id" field.
func (upuo *UserPlatformUpdateOne) ClearSecondID() *UserPlatformUpdateOne {
	upuo.mutation.ClearSecondID()
	return upuo
}

// Mutation returns the UserPlatformMutation object of the builder.
func (upuo *UserPlatformUpdateOne) Mutation() *UserPlatformMutation {
	return upuo.mutation
}

// Where appends a list predicates to the UserPlatformUpdate builder.
func (upuo *UserPlatformUpdateOne) Where(ps ...predicate.UserPlatform) *UserPlatformUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPlatformUpdateOne) Select(field string, fields ...string) *UserPlatformUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPlatform entity.
func (upuo *UserPlatformUpdateOne) Save(ctx context.Context) (*UserPlatform, error) {
	upuo.defaults()
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPlatformUpdateOne) SaveX(ctx context.Context) *UserPlatform {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPlatformUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPlatformUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upuo *UserPlatformUpdateOne) defaults() {
	if _, ok := upuo.mutation.UpdatedAt(); !ok && !upuo.mutation.UpdatedAtCleared() {
		v := userplatform.UpdateDefaultUpdatedAt()
		upuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upuo *UserPlatformUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserPlatformUpdateOne {
	upuo.modifiers = append(upuo.modifiers, modifiers...)
	return upuo
}

func (upuo *UserPlatformUpdateOne) sqlSave(ctx context.Context) (_node *UserPlatform, err error) {
	_spec := sqlgraph.NewUpdateSpec(userplatform.Table, userplatform.Columns, sqlgraph.NewFieldSpec(userplatform.FieldID, field.TypeInt))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPlatform.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userplatform.FieldID)
		for _, f := range fields {
			if !userplatform.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userplatform.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if upuo.mutation.CreatedAtCleared() {
		_spec.ClearField(userplatform.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := upuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userplatform.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(userplatform.FieldUpdatedAt, field.TypeInt64, value)
	}
	if upuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(userplatform.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := upuo.mutation.UserID(); ok {
		_spec.SetField(userplatform.FieldUserID, field.TypeInt, value)
	}
	if value, ok := upuo.mutation.AddedUserID(); ok {
		_spec.AddField(userplatform.FieldUserID, field.TypeInt, value)
	}
	if value, ok := upuo.mutation.Platform(); ok {
		_spec.SetField(userplatform.FieldPlatform, field.TypeString, value)
	}
	if value, ok := upuo.mutation.PlatformID(); ok {
		_spec.SetField(userplatform.FieldPlatformID, field.TypeString, value)
	}
	if value, ok := upuo.mutation.SecondID(); ok {
		_spec.SetField(userplatform.FieldSecondID, field.TypeString, value)
	}
	if upuo.mutation.SecondIDCleared() {
		_spec.ClearField(userplatform.FieldSecondID, field.TypeString)
	}
	_spec.AddModifiers(upuo.modifiers...)
	_node = &UserPlatform{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userplatform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}

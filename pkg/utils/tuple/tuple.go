// Package tuple Code generated by go generate; DO NOT EDIT.
package tuple

import (
	"encoding/json"
	"fmt"
)

// Of2 represents a tuple of 2 elements
type Of2[A any, B any] struct {
	First  A
	Second B
}

// New2 creates a new tuple of 2 elements
func New2[A any, B any](first A, second B) Of2[A, B] {
	return Of2[A, B]{
		First:  first,
		Second: second,
	}
}

// MarshalJSON implements json.Marshaler interface
func (t *Of2[A, B]) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{t.First, t.Second})
}

// UnmarshalJSON implements json.Unmarshaler interface
func (t *Of2[A, B]) UnmarshalJSON(data []byte) error {
	var raw []json.RawMessage
	if err := json.Unmarshal(data, &raw); err != nil {
		return fmt.Errorf("failed to unmarshal array: %w", err)
	}

	if len(raw) < 2 {
		return fmt.Errorf("expected array of length 2, got %d", len(raw))
	}

	if err := json.Unmarshal(raw[0], &t.First); err != nil {
		return fmt.Errorf("failed to unmarshal first element: %w", err)
	}

	if err := json.Unmarshal(raw[1], &t.Second); err != nil {
		return fmt.Errorf("failed to unmarshal second element: %w", err)
	}

	return nil
}

// Of3 represents a tuple of 3 elements
type Of3[A any, B any, C any] struct {
	First  A
	Second B
	Third  C
}

// New3 creates a new tuple of 3 elements
func New3[A any, B any, C any](first A, second B, third C) Of3[A, B, C] {
	return Of3[A, B, C]{
		First:  first,
		Second: second,
		Third:  third,
	}
}

// MarshalJSON implements json.Marshaler interface
func (t *Of3[A, B, C]) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{t.First, t.Second, t.Third})
}

// UnmarshalJSON implements json.Unmarshaler interface
func (t *Of3[A, B, C]) UnmarshalJSON(data []byte) error {
	var raw []json.RawMessage
	if err := json.Unmarshal(data, &raw); err != nil {
		return fmt.Errorf("failed to unmarshal array: %w", err)
	}

	if len(raw) < 3 {
		return fmt.Errorf("expected array of length 3, got %d", len(raw))
	}

	if err := json.Unmarshal(raw[0], &t.First); err != nil {
		return fmt.Errorf("failed to unmarshal first element: %w", err)
	}

	if err := json.Unmarshal(raw[1], &t.Second); err != nil {
		return fmt.Errorf("failed to unmarshal second element: %w", err)
	}

	if err := json.Unmarshal(raw[2], &t.Third); err != nil {
		return fmt.Errorf("failed to unmarshal third element: %w", err)
	}

	return nil
}

// Of4 represents a tuple of 4 elements
type Of4[A any, B any, C any, D any] struct {
	First  A
	Second B
	Third  C
	Fourth D
}

// New4 creates a new tuple of 4 elements
func New4[A any, B any, C any, D any](first A, second B, third C, fourth D) Of4[A, B, C, D] {
	return Of4[A, B, C, D]{
		First:  first,
		Second: second,
		Third:  third,
		Fourth: fourth,
	}
}

// MarshalJSON implements json.Marshaler interface
func (t *Of4[A, B, C, D]) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{t.First, t.Second, t.Third, t.Fourth})
}

// UnmarshalJSON implements json.Unmarshaler interface
func (t *Of4[A, B, C, D]) UnmarshalJSON(data []byte) error {
	var raw []json.RawMessage
	if err := json.Unmarshal(data, &raw); err != nil {
		return fmt.Errorf("failed to unmarshal array: %w", err)
	}

	if len(raw) < 4 {
		return fmt.Errorf("expected array of length 4, got %d", len(raw))
	}

	if err := json.Unmarshal(raw[0], &t.First); err != nil {
		return fmt.Errorf("failed to unmarshal first element: %w", err)
	}

	if err := json.Unmarshal(raw[1], &t.Second); err != nil {
		return fmt.Errorf("failed to unmarshal second element: %w", err)
	}

	if err := json.Unmarshal(raw[2], &t.Third); err != nil {
		return fmt.Errorf("failed to unmarshal third element: %w", err)
	}

	if err := json.Unmarshal(raw[3], &t.Fourth); err != nil {
		return fmt.Errorf("failed to unmarshal fourth element: %w", err)
	}

	return nil
}

// Of5 represents a tuple of 5 elements
type Of5[A any, B any, C any, D any, E any] struct {
	First  A
	Second B
	Third  C
	Fourth D
	Fifth  E
}

// New5 creates a new tuple of 5 elements
func New5[A any, B any, C any, D any, E any](first A, second B, third C, fourth D, fifth E) Of5[A, B, C, D, E] {
	return Of5[A, B, C, D, E]{
		First:  first,
		Second: second,
		Third:  third,
		Fourth: fourth,
		Fifth:  fifth,
	}
}

// MarshalJSON implements json.Marshaler interface
func (t *Of5[A, B, C, D, E]) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{t.First, t.Second, t.Third, t.Fourth, t.Fifth})
}

// UnmarshalJSON implements json.Unmarshaler interface
func (t *Of5[A, B, C, D, E]) UnmarshalJSON(data []byte) error {
	var raw []json.RawMessage
	if err := json.Unmarshal(data, &raw); err != nil {
		return fmt.Errorf("failed to unmarshal array: %w", err)
	}

	if len(raw) < 5 {
		return fmt.Errorf("expected array of length 5, got %d", len(raw))
	}

	if err := json.Unmarshal(raw[0], &t.First); err != nil {
		return fmt.Errorf("failed to unmarshal first element: %w", err)
	}

	if err := json.Unmarshal(raw[1], &t.Second); err != nil {
		return fmt.Errorf("failed to unmarshal second element: %w", err)
	}

	if err := json.Unmarshal(raw[2], &t.Third); err != nil {
		return fmt.Errorf("failed to unmarshal third element: %w", err)
	}

	if err := json.Unmarshal(raw[3], &t.Fourth); err != nil {
		return fmt.Errorf("failed to unmarshal fourth element: %w", err)
	}

	if err := json.Unmarshal(raw[4], &t.Fifth); err != nil {
		return fmt.Errorf("failed to unmarshal fifth element: %w", err)
	}

	return nil
}

// Of6 represents a tuple of 6 elements
type Of6[A any, B any, C any, D any, E any, F any] struct {
	First  A
	Second B
	Third  C
	Fourth D
	Fifth  E
	Sixth  F
}

// New6 creates a new tuple of 6 elements
func New6[A any, B any, C any, D any, E any, F any](first A, second B, third C, fourth D, fifth E, sixth F) Of6[A, B, C, D, E, F] {
	return Of6[A, B, C, D, E, F]{
		First:  first,
		Second: second,
		Third:  third,
		Fourth: fourth,
		Fifth:  fifth,
		Sixth:  sixth,
	}
}

// MarshalJSON implements json.Marshaler interface
func (t *Of6[A, B, C, D, E, F]) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{t.First, t.Second, t.Third, t.Fourth, t.Fifth, t.Sixth})
}

// UnmarshalJSON implements json.Unmarshaler interface
func (t *Of6[A, B, C, D, E, F]) UnmarshalJSON(data []byte) error {
	var raw []json.RawMessage
	if err := json.Unmarshal(data, &raw); err != nil {
		return fmt.Errorf("failed to unmarshal array: %w", err)
	}

	if len(raw) < 6 {
		return fmt.Errorf("expected array of length 6, got %d", len(raw))
	}

	if err := json.Unmarshal(raw[0], &t.First); err != nil {
		return fmt.Errorf("failed to unmarshal first element: %w", err)
	}

	if err := json.Unmarshal(raw[1], &t.Second); err != nil {
		return fmt.Errorf("failed to unmarshal second element: %w", err)
	}

	if err := json.Unmarshal(raw[2], &t.Third); err != nil {
		return fmt.Errorf("failed to unmarshal third element: %w", err)
	}

	if err := json.Unmarshal(raw[3], &t.Fourth); err != nil {
		return fmt.Errorf("failed to unmarshal fourth element: %w", err)
	}

	if err := json.Unmarshal(raw[4], &t.Fifth); err != nil {
		return fmt.Errorf("failed to unmarshal fifth element: %w", err)
	}

	if err := json.Unmarshal(raw[5], &t.Sixth); err != nil {
		return fmt.Errorf("failed to unmarshal sixth element: %w", err)
	}

	return nil
}

// Of7 represents a tuple of 7 elements
type Of7[A any, B any, C any, D any, E any, F any, G any] struct {
	First   A
	Second  B
	Third   C
	Fourth  D
	Fifth   E
	Sixth   F
	Seventh G
}

// New7 creates a new tuple of 7 elements
func New7[A any, B any, C any, D any, E any, F any, G any](first A, second B, third C, fourth D, fifth E, sixth F, seventh G) Of7[A, B, C, D, E, F, G] {
	return Of7[A, B, C, D, E, F, G]{
		First:   first,
		Second:  second,
		Third:   third,
		Fourth:  fourth,
		Fifth:   fifth,
		Sixth:   sixth,
		Seventh: seventh,
	}
}

// MarshalJSON implements json.Marshaler interface
func (t *Of7[A, B, C, D, E, F, G]) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{t.First, t.Second, t.Third, t.Fourth, t.Fifth, t.Sixth, t.Seventh})
}

// UnmarshalJSON implements json.Unmarshaler interface
func (t *Of7[A, B, C, D, E, F, G]) UnmarshalJSON(data []byte) error {
	var raw []json.RawMessage
	if err := json.Unmarshal(data, &raw); err != nil {
		return fmt.Errorf("failed to unmarshal array: %w", err)
	}

	if len(raw) < 7 {
		return fmt.Errorf("expected array of length 7, got %d", len(raw))
	}

	if err := json.Unmarshal(raw[0], &t.First); err != nil {
		return fmt.Errorf("failed to unmarshal first element: %w", err)
	}

	if err := json.Unmarshal(raw[1], &t.Second); err != nil {
		return fmt.Errorf("failed to unmarshal second element: %w", err)
	}

	if err := json.Unmarshal(raw[2], &t.Third); err != nil {
		return fmt.Errorf("failed to unmarshal third element: %w", err)
	}

	if err := json.Unmarshal(raw[3], &t.Fourth); err != nil {
		return fmt.Errorf("failed to unmarshal fourth element: %w", err)
	}

	if err := json.Unmarshal(raw[4], &t.Fifth); err != nil {
		return fmt.Errorf("failed to unmarshal fifth element: %w", err)
	}

	if err := json.Unmarshal(raw[5], &t.Sixth); err != nil {
		return fmt.Errorf("failed to unmarshal sixth element: %w", err)
	}

	if err := json.Unmarshal(raw[6], &t.Seventh); err != nil {
		return fmt.Errorf("failed to unmarshal seventh element: %w", err)
	}

	return nil
}

// Of8 represents a tuple of 8 elements
type Of8[A any, B any, C any, D any, E any, F any, G any, H any] struct {
	First   A
	Second  B
	Third   C
	Fourth  D
	Fifth   E
	Sixth   F
	Seventh G
	Eighth  H
}

// New8 creates a new tuple of 8 elements
func New8[A any, B any, C any, D any, E any, F any, G any, H any](first A, second B, third C, fourth D, fifth E, sixth F, seventh G, eighth H) Of8[A, B, C, D, E, F, G, H] {
	return Of8[A, B, C, D, E, F, G, H]{
		First:   first,
		Second:  second,
		Third:   third,
		Fourth:  fourth,
		Fifth:   fifth,
		Sixth:   sixth,
		Seventh: seventh,
		Eighth:  eighth,
	}
}

// MarshalJSON implements json.Marshaler interface
func (t *Of8[A, B, C, D, E, F, G, H]) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{t.First, t.Second, t.Third, t.Fourth, t.Fifth, t.Sixth, t.Seventh, t.Eighth})
}

// UnmarshalJSON implements json.Unmarshaler interface
func (t *Of8[A, B, C, D, E, F, G, H]) UnmarshalJSON(data []byte) error {
	var raw []json.RawMessage
	if err := json.Unmarshal(data, &raw); err != nil {
		return fmt.Errorf("failed to unmarshal array: %w", err)
	}

	if len(raw) < 8 {
		return fmt.Errorf("expected array of length 8, got %d", len(raw))
	}

	if err := json.Unmarshal(raw[0], &t.First); err != nil {
		return fmt.Errorf("failed to unmarshal first element: %w", err)
	}

	if err := json.Unmarshal(raw[1], &t.Second); err != nil {
		return fmt.Errorf("failed to unmarshal second element: %w", err)
	}

	if err := json.Unmarshal(raw[2], &t.Third); err != nil {
		return fmt.Errorf("failed to unmarshal third element: %w", err)
	}

	if err := json.Unmarshal(raw[3], &t.Fourth); err != nil {
		return fmt.Errorf("failed to unmarshal fourth element: %w", err)
	}

	if err := json.Unmarshal(raw[4], &t.Fifth); err != nil {
		return fmt.Errorf("failed to unmarshal fifth element: %w", err)
	}

	if err := json.Unmarshal(raw[5], &t.Sixth); err != nil {
		return fmt.Errorf("failed to unmarshal sixth element: %w", err)
	}

	if err := json.Unmarshal(raw[6], &t.Seventh); err != nil {
		return fmt.Errorf("failed to unmarshal seventh element: %w", err)
	}

	if err := json.Unmarshal(raw[7], &t.Eighth); err != nil {
		return fmt.Errorf("failed to unmarshal eighth element: %w", err)
	}

	return nil
}

// Of9 represents a tuple of 9 elements
type Of9[A any, B any, C any, D any, E any, F any, G any, H any, I any] struct {
	First   A
	Second  B
	Third   C
	Fourth  D
	Fifth   E
	Sixth   F
	Seventh G
	Eighth  H
	Ninth   I
}

// New9 creates a new tuple of 9 elements
func New9[A any, B any, C any, D any, E any, F any, G any, H any, I any](first A, second B, third C, fourth D, fifth E, sixth F, seventh G, eighth H, ninth I) Of9[A, B, C, D, E, F, G, H, I] {
	return Of9[A, B, C, D, E, F, G, H, I]{
		First:   first,
		Second:  second,
		Third:   third,
		Fourth:  fourth,
		Fifth:   fifth,
		Sixth:   sixth,
		Seventh: seventh,
		Eighth:  eighth,
		Ninth:   ninth,
	}
}

// MarshalJSON implements json.Marshaler interface
func (t *Of9[A, B, C, D, E, F, G, H, I]) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{t.First, t.Second, t.Third, t.Fourth, t.Fifth, t.Sixth, t.Seventh, t.Eighth, t.Ninth})
}

// UnmarshalJSON implements json.Unmarshaler interface
func (t *Of9[A, B, C, D, E, F, G, H, I]) UnmarshalJSON(data []byte) error {
	var raw []json.RawMessage
	if err := json.Unmarshal(data, &raw); err != nil {
		return fmt.Errorf("failed to unmarshal array: %w", err)
	}

	if len(raw) < 9 {
		return fmt.Errorf("expected array of length 9, got %d", len(raw))
	}

	if err := json.Unmarshal(raw[0], &t.First); err != nil {
		return fmt.Errorf("failed to unmarshal first element: %w", err)
	}

	if err := json.Unmarshal(raw[1], &t.Second); err != nil {
		return fmt.Errorf("failed to unmarshal second element: %w", err)
	}

	if err := json.Unmarshal(raw[2], &t.Third); err != nil {
		return fmt.Errorf("failed to unmarshal third element: %w", err)
	}

	if err := json.Unmarshal(raw[3], &t.Fourth); err != nil {
		return fmt.Errorf("failed to unmarshal fourth element: %w", err)
	}

	if err := json.Unmarshal(raw[4], &t.Fifth); err != nil {
		return fmt.Errorf("failed to unmarshal fifth element: %w", err)
	}

	if err := json.Unmarshal(raw[5], &t.Sixth); err != nil {
		return fmt.Errorf("failed to unmarshal sixth element: %w", err)
	}

	if err := json.Unmarshal(raw[6], &t.Seventh); err != nil {
		return fmt.Errorf("failed to unmarshal seventh element: %w", err)
	}

	if err := json.Unmarshal(raw[7], &t.Eighth); err != nil {
		return fmt.Errorf("failed to unmarshal eighth element: %w", err)
	}

	if err := json.Unmarshal(raw[8], &t.Ninth); err != nil {
		return fmt.Errorf("failed to unmarshal ninth element: %w", err)
	}

	return nil
}

// Of10 represents a tuple of 10 elements
type Of10[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any] struct {
	First   A
	Second  B
	Third   C
	Fourth  D
	Fifth   E
	Sixth   F
	Seventh G
	Eighth  H
	Ninth   I
	Tenth   J
}

// New10 creates a new tuple of 10 elements
func New10[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any](first A, second B, third C, fourth D, fifth E, sixth F, seventh G, eighth H, ninth I, tenth J) Of10[A, B, C, D, E, F, G, H, I, J] {
	return Of10[A, B, C, D, E, F, G, H, I, J]{
		First:   first,
		Second:  second,
		Third:   third,
		Fourth:  fourth,
		Fifth:   fifth,
		Sixth:   sixth,
		Seventh: seventh,
		Eighth:  eighth,
		Ninth:   ninth,
		Tenth:   tenth,
	}
}

// MarshalJSON implements json.Marshaler interface
func (t *Of10[A, B, C, D, E, F, G, H, I, J]) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{t.First, t.Second, t.Third, t.Fourth, t.Fifth, t.Sixth, t.Seventh, t.Eighth, t.Ninth, t.Tenth})
}

// UnmarshalJSON implements json.Unmarshaler interface
func (t *Of10[A, B, C, D, E, F, G, H, I, J]) UnmarshalJSON(data []byte) error {
	var raw []json.RawMessage
	if err := json.Unmarshal(data, &raw); err != nil {
		return fmt.Errorf("failed to unmarshal array: %w", err)
	}

	if len(raw) < 10 {
		return fmt.Errorf("expected array of length 10, got %d", len(raw))
	}

	if err := json.Unmarshal(raw[0], &t.First); err != nil {
		return fmt.Errorf("failed to unmarshal first element: %w", err)
	}

	if err := json.Unmarshal(raw[1], &t.Second); err != nil {
		return fmt.Errorf("failed to unmarshal second element: %w", err)
	}

	if err := json.Unmarshal(raw[2], &t.Third); err != nil {
		return fmt.Errorf("failed to unmarshal third element: %w", err)
	}

	if err := json.Unmarshal(raw[3], &t.Fourth); err != nil {
		return fmt.Errorf("failed to unmarshal fourth element: %w", err)
	}

	if err := json.Unmarshal(raw[4], &t.Fifth); err != nil {
		return fmt.Errorf("failed to unmarshal fifth element: %w", err)
	}

	if err := json.Unmarshal(raw[5], &t.Sixth); err != nil {
		return fmt.Errorf("failed to unmarshal sixth element: %w", err)
	}

	if err := json.Unmarshal(raw[6], &t.Seventh); err != nil {
		return fmt.Errorf("failed to unmarshal seventh element: %w", err)
	}

	if err := json.Unmarshal(raw[7], &t.Eighth); err != nil {
		return fmt.Errorf("failed to unmarshal eighth element: %w", err)
	}

	if err := json.Unmarshal(raw[8], &t.Ninth); err != nil {
		return fmt.Errorf("failed to unmarshal ninth element: %w", err)
	}

	if err := json.Unmarshal(raw[9], &t.Tenth); err != nil {
		return fmt.Errorf("failed to unmarshal tenth element: %w", err)
	}

	return nil
}

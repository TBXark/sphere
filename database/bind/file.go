package bind

import (
	_ "embed"
	"strings"
	"text/template"
)

type GenFileConf struct {
	Entity        any
	Actions       []any
	ConfigBuilder func(act any) *GenFuncConf
}

func GenFile(mod string, items []GenFileConf) (string, error) {
	tmpl, err := template.New("header").Funcs(template.FuncMap{
		"lower": strings.ToLower,
	}).Parse(bindHeaderTmpl)
	if err != nil {
		return "", err
	}

	var file strings.Builder
	var body strings.Builder
	header := &headerContext{PackageBase: mod, Entities: make([]string, 0)}
	for _, item := range items {
		header.Entities = append(header.Entities, getStructName(item.Entity))
		for _, act := range item.Actions {
			body.WriteString(GenBindFunc(item.ConfigBuilder(act)))
		}
	}
	err = tmpl.Execute(&file, header)
	if err != nil {
		return "", err
	}
	file.WriteString(body.String())
	return file.String(), nil
}

type headerContext struct {
	PackageBase string
	Entities    []string
}

const bindHeaderTmpl = `
{{$pkgBase := .PackageBase}}
// Code generated by Sphere. DO NOT EDIT.
package render

import (
	"github.com/TBXark/sphere/database/bind"
	"{{$pkgBase}}/api/entpb"
	"{{$pkgBase}}/internal/pkg/database/ent"
{{- range .Entities}}
	"{{$pkgBase}}/internal/pkg/database/ent/{{. | lower}}"
{{- end}}
)

const (
{{- range .Entities}}
	_ = {{. | lower}}.Label
{{- end}}
)
`

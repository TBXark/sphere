package bind

import (
	_ "embed"
	"go/format"
	"path"
	"strconv"
	"strings"
)

type GenFileConf struct {
	Entities []GenFileEntityConf
}

type GenFileEntityConf struct {
	Entity        any
	Actions       []any
	ConfigBuilder func(act any) *GenFuncConf
}

func GenFile(config *GenFileConf) (string, error) {
	var file strings.Builder
	var body strings.Builder
	var entity strings.Builder

	extraImports := [][2]string{
		extraImport(Options{}),
	}
	entity.WriteString("const (\n")
	for _, item := range config.Entities {
		entityName := strings.ToLower(typeName(item.Entity))
		extraImports = append(extraImports, extraImport(item.Entity))
		for _, act := range item.Actions {
			conf := item.ConfigBuilder(act)
			source := extraImport(conf.source)
			extraImports = append(extraImports,
				source,
				extraImport(act),
				extraImport(conf.target),
			)
			if entityName != "" {
				imp := "\t_ = " + entityName + ".Label\n"
				entity.WriteString(imp)
				extraImports = append(extraImports, [2]string{
					path.Join(source[0], entityName),
					entityName,
				})
				entityName = ""
			}
			body.WriteString(GenBindFunc(conf))
		}
	}
	entity.WriteString(")\n\n")
	file.WriteString("// Code generated by Sphere. DO NOT EDIT.\n")
	file.WriteString("package render\n\n")
	file.WriteString("import (\n")
	for _, imp := range compressedImports(extraImports) {
		file.WriteString("\t")
		if imp[1] != "" {
			file.WriteString(imp[1] + " ")
		}
		file.WriteString(strconv.Quote(imp[0]) + "\n")
	}
	file.WriteString(")\n\n")
	file.WriteString(entity.String())
	file.WriteString("\n\n")
	file.WriteString(body.String())

	source, err := format.Source([]byte(file.String()))
	if err != nil {
		return "", err
	}
	return string(source), nil
}

package main

import (
	"flag"
	"github.com/TBXark/sphere/database/bind"
	dashv1 "github.com/TBXark/sphere/layout/api/dash/v1"
	"github.com/TBXark/sphere/layout/internal/pkg/database/ent"
	"go/format"
	"log"
	"os"
	"strings"
)

func Gen() string {
	var sb strings.Builder
	sb.WriteString(`// Code generated by gen-bind. DO NOT EDIT.
package render

import (
	"github.com/TBXark/sphere/database/bind"
	dashv1 "github.com/TBXark/sphere/layout/api/dash/v1"
	"github.com/TBXark/sphere/layout/internal/pkg/database/ent"
)

`)
	for _, act := range []any{ent.AdminCreate{}, ent.AdminUpdateOne{}} {
		sb.WriteString(bind.Gen(bind.NewGenConf(ent.Admin{}, dashv1.AdminEdit{}, act).WithTargetPkgName("dashv1")))
	}
	return sb.String()
}

func main() {
	file := flag.String("file", "./internal/pkg/render/bind.go", "file path")
	flag.Parse()
	if *file == "" {
		log.Fatal("file is required")
	}
	fileCont := Gen()
	source, err := format.Source([]byte(fileCont))
	if err != nil {
		log.Fatalf("format source failed: %v", err)
	}
	err = os.WriteFile(*file, source, 0644)
	if err != nil {
		log.Fatalf("write file failed: %v", err)
	}
}

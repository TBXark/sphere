package errors

import (
	"strings"
	"unicode"

	"github.com/TBXark/sphere/cmd/protoc-gen-sphere-errors/generate/template"
	"github.com/TBXark/sphere/proto/errors/sphere/errors"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

const (
	errorsPackage       = protogen.GoImportPath("errors")
	statusErrorsPackage = protogen.GoImportPath("github.com/TBXark/sphere/core/errors/statuserr")
)

var enCases = cases.Title(language.AmericanEnglish, cases.NoLower)

func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Enums) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_errors.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-sphere-errors. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.QualifiedGoIdent(errorsPackage.Ident(""))
	g.QualifiedGoIdent(statusErrorsPackage.Ident("Error"))
	generateFileContent(gen, file, g)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Enums) == 0 {
		return
	}
	g.P("var _ = ", errorsPackage.Ident("Join"))
	g.P("var _ = new(", statusErrorsPackage.Ident("Error"), ")")
	g.P()
	index := 0
	for _, enum := range file.Enums {
		if !generateErrorsReason(gen, file, g, enum) {
			index++
		}
	}
	if index == 0 {
		g.Skip()
	}
}

func generateErrorsReason(_ *protogen.Plugin, _ *protogen.File, g *protogen.GeneratedFile, enum *protogen.Enum) bool {
	if !proto.HasExtension(enum.Desc.Options(), errors.E_DefaultStatus) {
		return false
	}
	defaultStatus := proto.GetExtension(enum.Desc.Options(), errors.E_DefaultStatus).(int32)
	var ew template.ErrorWrapper
	for _, v := range enum.Values {
		options := generateEnumOptions(v, defaultStatus)
		if options.Reason == "" {
			options.Reason = string(enum.Desc.Name()) + ":" + string(v.Desc.Name())
		}
		err := &template.ErrorInfo{
			Name:       string(enum.Desc.Name()),
			Value:      string(v.Desc.Name()),
			CamelValue: case2Camel(string(v.Desc.Name())),

			HasMessage: options.Message != "",
			Status:     options.Status,
			Code:       int32(v.Desc.Number()),
			Reason:     options.Reason,
			Message:    options.Message,
		}
		ew.Errors = append(ew.Errors, err)
	}
	if len(ew.Errors) == 0 {
		return true
	}
	g.P(ew.Execute())
	return false
}

func generateEnumOptions(enum *protogen.EnumValue, defaultStatus int32) *errors.Error {
	if proto.HasExtension(enum.Desc.Options(), errors.E_Options) {
		options := proto.GetExtension(enum.Desc.Options(), errors.E_Options)
		return options.(*errors.Error)
	} else {
		return &errors.Error{
			Status:  defaultStatus,
			Reason:  string(enum.Desc.Name()),
			Message: "",
		}
	}
}

func case2Camel(name string) string {
	if !strings.Contains(name, "_") {
		if name == strings.ToUpper(name) {
			name = strings.ToLower(name)
		}
		return enCases.String(name)
	}
	parts := strings.Split(name, "_")
	words := make([]string, 0, len(parts))
	for _, w := range parts {
		hasLower := false
		for _, r := range w {
			if unicode.IsLower(r) {
				hasLower = true
				break
			}
		}
		if !hasLower {
			w = strings.ToLower(w)
		}
		w = enCases.String(w)
		words = append(words, w)
	}

	return strings.Join(words, "")
}

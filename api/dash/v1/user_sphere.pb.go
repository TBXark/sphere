// Code generated by protoc-gen-sphere. DO NOT EDIT.
// versions:
// - protoc             (unknown)
// source: dash/v1/user.proto

package dashv1

import (
	context "context"
	ginx "github.com/TBXark/sphere/pkg/server/ginx"
	gin "github.com/gin-gonic/gin"
)

var _ = new(context.Context)
var _ = new(gin.IRouter)
var _ = new(ginx.ErrorResponse)

const OperationUserServiceUserInfo = "/dash.v1.UserService/UserInfo"

var EndpointsUserService = [...][3]string{
	{OperationUserServiceUserInfo, "GET", "/api/user/info"},
}

type UserServiceHTTPServer interface {
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
}

// @Summary UserInfo
// @Tags dash.v1
// @Accept json
// @Produce json
// @Security ApiKeyAuth
// @Success 200 {object} ginx.DataResponse[UserInfoResponse]
// @Success 400 {object} ginx.ErrorResponse
// @Success 401 {object} ginx.ErrorResponse
// @Success 403 {object} ginx.ErrorResponse
// @Success 500 {object} ginx.ErrorResponse
// @Router /api/user/info [get]
func _UserService_UserInfo0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx *gin.Context) {
	return ginx.WithJson(func(ctx *gin.Context) (*UserInfoResponse, error) {
		var in UserInfoRequest
		out, err := srv.UserInfo(ctx, &in)
		if err != nil {
			return nil, err
		}
		return out, nil
	})
}

func RegisterUserServiceHTTPServer(route gin.IRouter, srv UserServiceHTTPServer) {
	r := route.Group("/")
	r.GET("/api/user/info", _UserService_UserInfo0_HTTP_Handler(srv))
}

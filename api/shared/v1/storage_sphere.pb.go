// Code generated by protoc-gen-sphere. DO NOT EDIT.
// versions:
// - protoc             (unknown)
// source: shared/v1/storage.proto

package sharedv1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	ginx "github.com/tbxark/sphere/pkg/server/ginx"
)

var _ = new(context.Context)
var _ = new(gin.Context)
var _ = new(ginx.DataResponse[string])

type StorageServiceHTTPServer interface {
	UploadToken(context.Context, *UploadTokenRequest) (*UploadTokenResponse, error)
}

// @Summary UploadToken
// @Description UploadToken
// @Tags shared.v1
// @Accept json
// @Produce json
// @Param Authorization header string false "Bearer token"
// @Param request body UploadTokenRequest true "Request body"
// @Success 200 {object} ginx.DataResponse[UploadTokenResponse]
// @Router /api/upload/token [post]
func _StorageService_UploadToken0_HTTP_Handler(srv StorageServiceHTTPServer) func(ctx *gin.Context) {
	return ginx.WithJson(func(ctx *gin.Context) (*UploadTokenResponse, error) {
		var in UploadTokenRequest
		if err := ginx.ShouldBindJSON(ctx, &in); err != nil {
			return nil, err
		}
		out, err := srv.UploadToken(ctx, &in)
		if err != nil {
			return nil, err
		}
		return out, nil
	})
}

func RegisterStorageServiceHTTPServer(route gin.IRouter, srv StorageServiceHTTPServer) {
	r := route.Group("/")
	r.POST("/api/upload/token", _StorageService_UploadToken0_HTTP_Handler(srv))
}

// Code generated by protoc-gen-route. DO NOT EDIT.
// versions:
// source: bot/v1/counter.proto

package botv1

import (
	context "context"
	telegram "github.com/tbxark/sphere/pkg/telegram"
)

var _ = new(context.Context)
var _ = new(telegram.Update)

const OperationBotCounterServiceCounter = "/bot.v1.CounterService/Counter"
const OperationBotCounterServiceStart = "/bot.v1.CounterService/Start"

var ExtraBotDataCounterServiceCounter = telegram.NewMethodExtraData(map[string]string{
	"callback_query": "count",
	"command":        "count",
})
var ExtraBotDataCounterServiceStart = telegram.NewMethodExtraData(map[string]string{
	"command": "start",
})

func GetExtraBotDataByCounterServiceOperation(operation string) *telegram.MethodExtraData {
	switch operation {
	case OperationBotCounterServiceCounter:
		return &ExtraBotDataCounterServiceCounter
	case OperationBotCounterServiceStart:
		return &ExtraBotDataCounterServiceStart
	default:
		return nil
	}
}

type CounterServiceBotServer interface {
	Counter(context.Context, *CounterRequest) (*CounterResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
}

type CounterServiceBotCodec interface {
	DecodeCounterRequest(ctx context.Context, update *telegram.Update) (*CounterRequest, error)
	EncodeCounterResponse(ctx context.Context, reply *CounterResponse) (*telegram.Message, error)
	DecodeStartRequest(ctx context.Context, update *telegram.Update) (*StartRequest, error)
	EncodeStartResponse(ctx context.Context, reply *StartResponse) (*telegram.Message, error)
}

type CounterServiceBotHandler func(ctx context.Context, request *telegram.Update) error

type CounterServiceBotSender func(ctx context.Context, request *telegram.Update, msg *telegram.Message) error

func _CounterService_Start0_Bot_Handler(srv CounterServiceBotServer, codec CounterServiceBotCodec, sender CounterServiceBotSender) CounterServiceBotHandler {
	return func(ctx context.Context, request *telegram.Update) error {
		req, err := codec.DecodeStartRequest(ctx, request)
		if err != nil {
			return err
		}
		reply, err := srv.Start(ctx, req)
		if err != nil {
			return err
		}
		msg, err := codec.EncodeStartResponse(ctx, reply)
		if err != nil {
			return err
		}
		return sender(ctx, request, msg)
	}
}

func _CounterService_Counter0_Bot_Handler(srv CounterServiceBotServer, codec CounterServiceBotCodec, sender CounterServiceBotSender) CounterServiceBotHandler {
	return func(ctx context.Context, request *telegram.Update) error {
		req, err := codec.DecodeCounterRequest(ctx, request)
		if err != nil {
			return err
		}
		reply, err := srv.Counter(ctx, req)
		if err != nil {
			return err
		}
		msg, err := codec.EncodeCounterResponse(ctx, reply)
		if err != nil {
			return err
		}
		return sender(ctx, request, msg)
	}
}

func RegisterCounterServiceBotServer(srv CounterServiceBotServer, codec CounterServiceBotCodec, sender CounterServiceBotSender) map[string]CounterServiceBotHandler {
	handlers := make(map[string]CounterServiceBotHandler)
	handlers[OperationBotCounterServiceStart] = _CounterService_Start0_Bot_Handler(srv, codec, sender)
	handlers[OperationBotCounterServiceCounter] = _CounterService_Counter0_Bot_Handler(srv, codec, sender)
	return handlers
}

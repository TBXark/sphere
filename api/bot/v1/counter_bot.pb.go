// Code generated by protoc-gen-sphere. DO NOT EDIT.
// versions:
// source: bot/v1/counter.proto

package botv1

import (
	context "context"
)

var _ = new(context.Context)

const BotHandlerCounterServiceCounter = "/bot.v1.CounterService/Counter"
const BotHandlerCounterServiceStart = "/bot.v1.CounterService/Start"

type CounterServiceServer interface {
	Counter(context.Context, *CounterRequest) (*CounterResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
}

type CounterServiceCodec[Update any, Message any] interface {
	DecodeCounterRequest(ctx context.Context, update *Update) (*CounterRequest, error)
	EncodeCounterResponse(ctx context.Context, reply *CounterResponse) (*Message, error)
	DecodeStartRequest(ctx context.Context, update *Update) (*StartRequest, error)
	EncodeStartResponse(ctx context.Context, reply *StartResponse) (*Message, error)
}

type CounterServiceMessageSender[Bot any, Update any, Message any] func(ctx context.Context, bot *Bot, update *Update, msg *Message) error

type CounterServiceHandler[Bot any, Update any, Message any] func(ctx context.Context, bot *Bot, update *Update) error

func _CounterService_Start0_Bot_Handler[Bot any, Update any, Message any](srv CounterServiceServer, codec CounterServiceCodec[Update, Message], sender CounterServiceMessageSender[Bot, Update, Message]) CounterServiceHandler[Bot, Update, Message] {
	return func(ctx context.Context, bot *Bot, update *Update) error {
		req, err := codec.DecodeStartRequest(ctx, update)
		if err != nil {
			return err
		}
		reply, err := srv.Start(ctx, req)
		if err != nil {
			return err
		}
		msg, err := codec.EncodeStartResponse(ctx, reply)
		if err != nil {
			return err
		}
		return sender(ctx, bot, update, msg)
	}
}

func _CounterService_Counter0_Bot_Handler[Bot any, Update any, Message any](srv CounterServiceServer, codec CounterServiceCodec[Update, Message], sender CounterServiceMessageSender[Bot, Update, Message]) CounterServiceHandler[Bot, Update, Message] {
	return func(ctx context.Context, bot *Bot, update *Update) error {
		req, err := codec.DecodeCounterRequest(ctx, update)
		if err != nil {
			return err
		}
		reply, err := srv.Counter(ctx, req)
		if err != nil {
			return err
		}
		msg, err := codec.EncodeCounterResponse(ctx, reply)
		if err != nil {
			return err
		}
		return sender(ctx, bot, update, msg)
	}
}

func RegisterCounterServiceBotServer[Bot any, Update any, Message any](srv CounterServiceServer, codec CounterServiceCodec[Update, Message], sender CounterServiceMessageSender[Bot, Update, Message]) map[string]CounterServiceHandler[Bot, Update, Message] {
	handlers := make(map[string]CounterServiceHandler[Bot, Update, Message])
	handlers[BotHandlerCounterServiceStart] = _CounterService_Start0_Bot_Handler(srv, codec, sender)
	handlers[BotHandlerCounterServiceCounter] = _CounterService_Counter0_Bot_Handler(srv, codec, sender)
	return handlers
}

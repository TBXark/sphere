// Code generated by protoc-gen-sphere. DO NOT EDIT.
// versions:
// - protoc             (unknown)
// source: api/v1/auth.proto

package apiv1

import (
	context "context"
	protovalidate_go "github.com/bufbuild/protovalidate-go"
	gin "github.com/gin-gonic/gin"
	ginx "github.com/tbxark/sphere/pkg/server/ginx"
)

var _ = new(context.Context)
var _ = new(gin.Context)
var _ = new(ginx.ErrorResponse)
var _ = new(protovalidate_go.Validator)

const OperationAuthServiceAuthWxMini = "/api.v1.AuthService/AuthWxMini"

type AuthServiceHTTPServer interface {
	// AuthWxMini 请求小程序
	AuthWxMini(context.Context, *AuthWxMiniRequest) (*AuthWxMiniResponse, error)
}

// @Summary AuthWxMini
// @Description 请求小程序
// @Tags api.v1
// @Accept json
// @Produce json
// @Security ApiKeyAuth
// @Param request body AuthWxMiniRequest true "Request body"
// @Success 200 {object} ginx.DataResponse[AuthWxMiniResponse]
// @Success 400 {object} ginx.ErrorResponse
// @Success 401 {object} ginx.ErrorResponse
// @Success 403 {object} ginx.ErrorResponse
// @Success 500 {object} ginx.ErrorResponse
// @Router /v1/auth/wxmini [post]
func _AuthService_AuthWxMini0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx *gin.Context) {
	return ginx.WithJson(func(ctx *gin.Context) (*AuthWxMiniResponse, error) {
		var in AuthWxMiniRequest
		if err := ginx.ShouldBindJSON(ctx, &in); err != nil {
			return nil, err
		}
		out, err := srv.AuthWxMini(ctx, &in)
		if err != nil {
			return nil, err
		}
		return out, nil
	})
}

func RegisterAuthServiceHTTPServer(route gin.IRouter, srv AuthServiceHTTPServer) {
	r := route.Group("/")
	r.POST("/v1/auth/wxmini", _AuthService_AuthWxMini0_HTTP_Handler(srv))
}

var AuthServiceOperationRoutes = [...][3]string{
	{OperationAuthServiceAuthWxMini, "POST", "/v1/auth/wxmini"},
}

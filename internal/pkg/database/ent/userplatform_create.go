// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tbxark/go-base-api/internal/pkg/database/ent/userplatform"
)

// UserPlatformCreate is the builder for creating a UserPlatform entity.
type UserPlatformCreate struct {
	config
	mutation *UserPlatformMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (upc *UserPlatformCreate) SetCreatedAt(i int64) *UserPlatformCreate {
	upc.mutation.SetCreatedAt(i)
	return upc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upc *UserPlatformCreate) SetNillableCreatedAt(i *int64) *UserPlatformCreate {
	if i != nil {
		upc.SetCreatedAt(*i)
	}
	return upc
}

// SetUpdatedAt sets the "updated_at" field.
func (upc *UserPlatformCreate) SetUpdatedAt(i int64) *UserPlatformCreate {
	upc.mutation.SetUpdatedAt(i)
	return upc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upc *UserPlatformCreate) SetNillableUpdatedAt(i *int64) *UserPlatformCreate {
	if i != nil {
		upc.SetUpdatedAt(*i)
	}
	return upc
}

// SetUserID sets the "user_id" field.
func (upc *UserPlatformCreate) SetUserID(i int) *UserPlatformCreate {
	upc.mutation.SetUserID(i)
	return upc
}

// SetPlatform sets the "platform" field.
func (upc *UserPlatformCreate) SetPlatform(s string) *UserPlatformCreate {
	upc.mutation.SetPlatform(s)
	return upc
}

// SetPlatformID sets the "platform_id" field.
func (upc *UserPlatformCreate) SetPlatformID(s string) *UserPlatformCreate {
	upc.mutation.SetPlatformID(s)
	return upc
}

// SetSecondID sets the "second_id" field.
func (upc *UserPlatformCreate) SetSecondID(s string) *UserPlatformCreate {
	upc.mutation.SetSecondID(s)
	return upc
}

// SetNillableSecondID sets the "second_id" field if the given value is not nil.
func (upc *UserPlatformCreate) SetNillableSecondID(s *string) *UserPlatformCreate {
	if s != nil {
		upc.SetSecondID(*s)
	}
	return upc
}

// Mutation returns the UserPlatformMutation object of the builder.
func (upc *UserPlatformCreate) Mutation() *UserPlatformMutation {
	return upc.mutation
}

// Save creates the UserPlatform in the database.
func (upc *UserPlatformCreate) Save(ctx context.Context) (*UserPlatform, error) {
	upc.defaults()
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserPlatformCreate) SaveX(ctx context.Context) *UserPlatform {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserPlatformCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserPlatformCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upc *UserPlatformCreate) defaults() {
	if _, ok := upc.mutation.CreatedAt(); !ok {
		v := userplatform.DefaultCreatedAt()
		upc.mutation.SetCreatedAt(v)
	}
	if _, ok := upc.mutation.UpdatedAt(); !ok {
		v := userplatform.DefaultUpdatedAt()
		upc.mutation.SetUpdatedAt(v)
	}
	if _, ok := upc.mutation.SecondID(); !ok {
		v := userplatform.DefaultSecondID
		upc.mutation.SetSecondID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserPlatformCreate) check() error {
	if _, ok := upc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserPlatform.user_id"`)}
	}
	if _, ok := upc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "UserPlatform.platform"`)}
	}
	if _, ok := upc.mutation.PlatformID(); !ok {
		return &ValidationError{Name: "platform_id", err: errors.New(`ent: missing required field "UserPlatform.platform_id"`)}
	}
	return nil
}

func (upc *UserPlatformCreate) sqlSave(ctx context.Context) (*UserPlatform, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserPlatformCreate) createSpec() (*UserPlatform, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPlatform{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userplatform.Table, sqlgraph.NewFieldSpec(userplatform.FieldID, field.TypeInt))
	)
	_spec.OnConflict = upc.conflict
	if value, ok := upc.mutation.CreatedAt(); ok {
		_spec.SetField(userplatform.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := upc.mutation.UpdatedAt(); ok {
		_spec.SetField(userplatform.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := upc.mutation.UserID(); ok {
		_spec.SetField(userplatform.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := upc.mutation.Platform(); ok {
		_spec.SetField(userplatform.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := upc.mutation.PlatformID(); ok {
		_spec.SetField(userplatform.FieldPlatformID, field.TypeString, value)
		_node.PlatformID = value
	}
	if value, ok := upc.mutation.SecondID(); ok {
		_spec.SetField(userplatform.FieldSecondID, field.TypeString, value)
		_node.SecondID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserPlatform.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserPlatformUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (upc *UserPlatformCreate) OnConflict(opts ...sql.ConflictOption) *UserPlatformUpsertOne {
	upc.conflict = opts
	return &UserPlatformUpsertOne{
		create: upc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserPlatform.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upc *UserPlatformCreate) OnConflictColumns(columns ...string) *UserPlatformUpsertOne {
	upc.conflict = append(upc.conflict, sql.ConflictColumns(columns...))
	return &UserPlatformUpsertOne{
		create: upc,
	}
}

type (
	// UserPlatformUpsertOne is the builder for "upsert"-ing
	//  one UserPlatform node.
	UserPlatformUpsertOne struct {
		create *UserPlatformCreate
	}

	// UserPlatformUpsert is the "OnConflict" setter.
	UserPlatformUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserPlatformUpsert) SetUpdatedAt(v int64) *UserPlatformUpsert {
	u.Set(userplatform.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserPlatformUpsert) UpdateUpdatedAt() *UserPlatformUpsert {
	u.SetExcluded(userplatform.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserPlatformUpsert) AddUpdatedAt(v int64) *UserPlatformUpsert {
	u.Add(userplatform.FieldUpdatedAt, v)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserPlatformUpsert) ClearUpdatedAt() *UserPlatformUpsert {
	u.SetNull(userplatform.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserPlatformUpsert) SetUserID(v int) *UserPlatformUpsert {
	u.Set(userplatform.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserPlatformUpsert) UpdateUserID() *UserPlatformUpsert {
	u.SetExcluded(userplatform.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *UserPlatformUpsert) AddUserID(v int) *UserPlatformUpsert {
	u.Add(userplatform.FieldUserID, v)
	return u
}

// SetPlatform sets the "platform" field.
func (u *UserPlatformUpsert) SetPlatform(v string) *UserPlatformUpsert {
	u.Set(userplatform.FieldPlatform, v)
	return u
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *UserPlatformUpsert) UpdatePlatform() *UserPlatformUpsert {
	u.SetExcluded(userplatform.FieldPlatform)
	return u
}

// SetPlatformID sets the "platform_id" field.
func (u *UserPlatformUpsert) SetPlatformID(v string) *UserPlatformUpsert {
	u.Set(userplatform.FieldPlatformID, v)
	return u
}

// UpdatePlatformID sets the "platform_id" field to the value that was provided on create.
func (u *UserPlatformUpsert) UpdatePlatformID() *UserPlatformUpsert {
	u.SetExcluded(userplatform.FieldPlatformID)
	return u
}

// SetSecondID sets the "second_id" field.
func (u *UserPlatformUpsert) SetSecondID(v string) *UserPlatformUpsert {
	u.Set(userplatform.FieldSecondID, v)
	return u
}

// UpdateSecondID sets the "second_id" field to the value that was provided on create.
func (u *UserPlatformUpsert) UpdateSecondID() *UserPlatformUpsert {
	u.SetExcluded(userplatform.FieldSecondID)
	return u
}

// ClearSecondID clears the value of the "second_id" field.
func (u *UserPlatformUpsert) ClearSecondID() *UserPlatformUpsert {
	u.SetNull(userplatform.FieldSecondID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserPlatform.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserPlatformUpsertOne) UpdateNewValues() *UserPlatformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userplatform.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserPlatform.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserPlatformUpsertOne) Ignore() *UserPlatformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserPlatformUpsertOne) DoNothing() *UserPlatformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserPlatformCreate.OnConflict
// documentation for more info.
func (u *UserPlatformUpsertOne) Update(set func(*UserPlatformUpsert)) *UserPlatformUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserPlatformUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserPlatformUpsertOne) SetUpdatedAt(v int64) *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserPlatformUpsertOne) AddUpdatedAt(v int64) *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserPlatformUpsertOne) UpdateUpdatedAt() *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserPlatformUpsertOne) ClearUpdatedAt() *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserPlatformUpsertOne) SetUserID(v int) *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *UserPlatformUpsertOne) AddUserID(v int) *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserPlatformUpsertOne) UpdateUserID() *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.UpdateUserID()
	})
}

// SetPlatform sets the "platform" field.
func (u *UserPlatformUpsertOne) SetPlatform(v string) *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *UserPlatformUpsertOne) UpdatePlatform() *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.UpdatePlatform()
	})
}

// SetPlatformID sets the "platform_id" field.
func (u *UserPlatformUpsertOne) SetPlatformID(v string) *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.SetPlatformID(v)
	})
}

// UpdatePlatformID sets the "platform_id" field to the value that was provided on create.
func (u *UserPlatformUpsertOne) UpdatePlatformID() *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.UpdatePlatformID()
	})
}

// SetSecondID sets the "second_id" field.
func (u *UserPlatformUpsertOne) SetSecondID(v string) *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.SetSecondID(v)
	})
}

// UpdateSecondID sets the "second_id" field to the value that was provided on create.
func (u *UserPlatformUpsertOne) UpdateSecondID() *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.UpdateSecondID()
	})
}

// ClearSecondID clears the value of the "second_id" field.
func (u *UserPlatformUpsertOne) ClearSecondID() *UserPlatformUpsertOne {
	return u.Update(func(s *UserPlatformUpsert) {
		s.ClearSecondID()
	})
}

// Exec executes the query.
func (u *UserPlatformUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserPlatformCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserPlatformUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserPlatformUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserPlatformUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserPlatformCreateBulk is the builder for creating many UserPlatform entities in bulk.
type UserPlatformCreateBulk struct {
	config
	err      error
	builders []*UserPlatformCreate
	conflict []sql.ConflictOption
}

// Save creates the UserPlatform entities in the database.
func (upcb *UserPlatformCreateBulk) Save(ctx context.Context) ([]*UserPlatform, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserPlatform, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPlatformMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = upcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserPlatformCreateBulk) SaveX(ctx context.Context) []*UserPlatform {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserPlatformCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserPlatformCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserPlatform.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserPlatformUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (upcb *UserPlatformCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserPlatformUpsertBulk {
	upcb.conflict = opts
	return &UserPlatformUpsertBulk{
		create: upcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserPlatform.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upcb *UserPlatformCreateBulk) OnConflictColumns(columns ...string) *UserPlatformUpsertBulk {
	upcb.conflict = append(upcb.conflict, sql.ConflictColumns(columns...))
	return &UserPlatformUpsertBulk{
		create: upcb,
	}
}

// UserPlatformUpsertBulk is the builder for "upsert"-ing
// a bulk of UserPlatform nodes.
type UserPlatformUpsertBulk struct {
	create *UserPlatformCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserPlatform.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserPlatformUpsertBulk) UpdateNewValues() *UserPlatformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userplatform.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserPlatform.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserPlatformUpsertBulk) Ignore() *UserPlatformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserPlatformUpsertBulk) DoNothing() *UserPlatformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserPlatformCreateBulk.OnConflict
// documentation for more info.
func (u *UserPlatformUpsertBulk) Update(set func(*UserPlatformUpsert)) *UserPlatformUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserPlatformUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserPlatformUpsertBulk) SetUpdatedAt(v int64) *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserPlatformUpsertBulk) AddUpdatedAt(v int64) *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserPlatformUpsertBulk) UpdateUpdatedAt() *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserPlatformUpsertBulk) ClearUpdatedAt() *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserPlatformUpsertBulk) SetUserID(v int) *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *UserPlatformUpsertBulk) AddUserID(v int) *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserPlatformUpsertBulk) UpdateUserID() *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.UpdateUserID()
	})
}

// SetPlatform sets the "platform" field.
func (u *UserPlatformUpsertBulk) SetPlatform(v string) *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *UserPlatformUpsertBulk) UpdatePlatform() *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.UpdatePlatform()
	})
}

// SetPlatformID sets the "platform_id" field.
func (u *UserPlatformUpsertBulk) SetPlatformID(v string) *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.SetPlatformID(v)
	})
}

// UpdatePlatformID sets the "platform_id" field to the value that was provided on create.
func (u *UserPlatformUpsertBulk) UpdatePlatformID() *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.UpdatePlatformID()
	})
}

// SetSecondID sets the "second_id" field.
func (u *UserPlatformUpsertBulk) SetSecondID(v string) *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.SetSecondID(v)
	})
}

// UpdateSecondID sets the "second_id" field to the value that was provided on create.
func (u *UserPlatformUpsertBulk) UpdateSecondID() *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.UpdateSecondID()
	})
}

// ClearSecondID clears the value of the "second_id" field.
func (u *UserPlatformUpsertBulk) ClearSecondID() *UserPlatformUpsertBulk {
	return u.Update(func(s *UserPlatformUpsert) {
		s.ClearSecondID()
	})
}

// Exec executes the query.
func (u *UserPlatformUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserPlatformCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserPlatformCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserPlatformUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

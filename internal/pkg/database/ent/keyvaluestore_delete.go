// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tbxark/sphere/internal/pkg/database/ent/keyvaluestore"
	"github.com/tbxark/sphere/internal/pkg/database/ent/predicate"
)

// KeyValueStoreDelete is the builder for deleting a KeyValueStore entity.
type KeyValueStoreDelete struct {
	config
	hooks    []Hook
	mutation *KeyValueStoreMutation
}

// Where appends a list predicates to the KeyValueStoreDelete builder.
func (kvsd *KeyValueStoreDelete) Where(ps ...predicate.KeyValueStore) *KeyValueStoreDelete {
	kvsd.mutation.Where(ps...)
	return kvsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (kvsd *KeyValueStoreDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, kvsd.sqlExec, kvsd.mutation, kvsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (kvsd *KeyValueStoreDelete) ExecX(ctx context.Context) int {
	n, err := kvsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (kvsd *KeyValueStoreDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(keyvaluestore.Table, sqlgraph.NewFieldSpec(keyvaluestore.FieldID, field.TypeInt))
	if ps := kvsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, kvsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	kvsd.mutation.done = true
	return affected, err
}

// KeyValueStoreDeleteOne is the builder for deleting a single KeyValueStore entity.
type KeyValueStoreDeleteOne struct {
	kvsd *KeyValueStoreDelete
}

// Where appends a list predicates to the KeyValueStoreDelete builder.
func (kvsdo *KeyValueStoreDeleteOne) Where(ps ...predicate.KeyValueStore) *KeyValueStoreDeleteOne {
	kvsdo.kvsd.mutation.Where(ps...)
	return kvsdo
}

// Exec executes the deletion query.
func (kvsdo *KeyValueStoreDeleteOne) Exec(ctx context.Context) error {
	n, err := kvsdo.kvsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{keyvaluestore.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (kvsdo *KeyValueStoreDeleteOne) ExecX(ctx context.Context) {
	if err := kvsdo.Exec(ctx); err != nil {
		panic(err)
	}
}

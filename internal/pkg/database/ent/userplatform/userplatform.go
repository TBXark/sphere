// Code generated by ent, DO NOT EDIT.

package userplatform

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the userplatform type in the database.
	Label = "user_platform"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldPlatformID holds the string denoting the platform_id field in the database.
	FieldPlatformID = "platform_id"
	// FieldSecondID holds the string denoting the second_id field in the database.
	FieldSecondID = "second_id"
	// Table holds the table name of the userplatform in the database.
	Table = "user_platforms"
)

// Columns holds all SQL columns for userplatform fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldPlatform,
	FieldPlatformID,
	FieldSecondID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// DefaultSecondID holds the default value on creation for the "second_id" field.
	DefaultSecondID string
)

// OrderOption defines the ordering options for the UserPlatform queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByPlatformID orders the results by the platform_id field.
func ByPlatformID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatformID, opts...).ToFunc()
}

// BySecondID orders the results by the second_id field.
func BySecondID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecondID, opts...).ToFunc()
}

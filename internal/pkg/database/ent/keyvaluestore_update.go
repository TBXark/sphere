// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tbxark/sphere/internal/pkg/database/ent/keyvaluestore"
	"github.com/tbxark/sphere/internal/pkg/database/ent/predicate"
)

// KeyValueStoreUpdate is the builder for updating KeyValueStore entities.
type KeyValueStoreUpdate struct {
	config
	hooks     []Hook
	mutation  *KeyValueStoreMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the KeyValueStoreUpdate builder.
func (kvsu *KeyValueStoreUpdate) Where(ps ...predicate.KeyValueStore) *KeyValueStoreUpdate {
	kvsu.mutation.Where(ps...)
	return kvsu
}

// SetUpdatedAt sets the "updated_at" field.
func (kvsu *KeyValueStoreUpdate) SetUpdatedAt(i int64) *KeyValueStoreUpdate {
	kvsu.mutation.ResetUpdatedAt()
	kvsu.mutation.SetUpdatedAt(i)
	return kvsu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (kvsu *KeyValueStoreUpdate) AddUpdatedAt(i int64) *KeyValueStoreUpdate {
	kvsu.mutation.AddUpdatedAt(i)
	return kvsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (kvsu *KeyValueStoreUpdate) ClearUpdatedAt() *KeyValueStoreUpdate {
	kvsu.mutation.ClearUpdatedAt()
	return kvsu
}

// SetKey sets the "key" field.
func (kvsu *KeyValueStoreUpdate) SetKey(s string) *KeyValueStoreUpdate {
	kvsu.mutation.SetKey(s)
	return kvsu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (kvsu *KeyValueStoreUpdate) SetNillableKey(s *string) *KeyValueStoreUpdate {
	if s != nil {
		kvsu.SetKey(*s)
	}
	return kvsu
}

// SetValue sets the "value" field.
func (kvsu *KeyValueStoreUpdate) SetValue(b []byte) *KeyValueStoreUpdate {
	kvsu.mutation.SetValue(b)
	return kvsu
}

// ClearValue clears the value of the "value" field.
func (kvsu *KeyValueStoreUpdate) ClearValue() *KeyValueStoreUpdate {
	kvsu.mutation.ClearValue()
	return kvsu
}

// Mutation returns the KeyValueStoreMutation object of the builder.
func (kvsu *KeyValueStoreUpdate) Mutation() *KeyValueStoreMutation {
	return kvsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kvsu *KeyValueStoreUpdate) Save(ctx context.Context) (int, error) {
	kvsu.defaults()
	return withHooks(ctx, kvsu.sqlSave, kvsu.mutation, kvsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kvsu *KeyValueStoreUpdate) SaveX(ctx context.Context) int {
	affected, err := kvsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kvsu *KeyValueStoreUpdate) Exec(ctx context.Context) error {
	_, err := kvsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kvsu *KeyValueStoreUpdate) ExecX(ctx context.Context) {
	if err := kvsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kvsu *KeyValueStoreUpdate) defaults() {
	if _, ok := kvsu.mutation.UpdatedAt(); !ok && !kvsu.mutation.UpdatedAtCleared() {
		v := keyvaluestore.UpdateDefaultUpdatedAt()
		kvsu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (kvsu *KeyValueStoreUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *KeyValueStoreUpdate {
	kvsu.modifiers = append(kvsu.modifiers, modifiers...)
	return kvsu
}

func (kvsu *KeyValueStoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(keyvaluestore.Table, keyvaluestore.Columns, sqlgraph.NewFieldSpec(keyvaluestore.FieldID, field.TypeInt))
	if ps := kvsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if kvsu.mutation.CreatedAtCleared() {
		_spec.ClearField(keyvaluestore.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := kvsu.mutation.UpdatedAt(); ok {
		_spec.SetField(keyvaluestore.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := kvsu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(keyvaluestore.FieldUpdatedAt, field.TypeInt64, value)
	}
	if kvsu.mutation.UpdatedAtCleared() {
		_spec.ClearField(keyvaluestore.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := kvsu.mutation.Key(); ok {
		_spec.SetField(keyvaluestore.FieldKey, field.TypeString, value)
	}
	if value, ok := kvsu.mutation.Value(); ok {
		_spec.SetField(keyvaluestore.FieldValue, field.TypeBytes, value)
	}
	if kvsu.mutation.ValueCleared() {
		_spec.ClearField(keyvaluestore.FieldValue, field.TypeBytes)
	}
	_spec.AddModifiers(kvsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, kvsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keyvaluestore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	kvsu.mutation.done = true
	return n, nil
}

// KeyValueStoreUpdateOne is the builder for updating a single KeyValueStore entity.
type KeyValueStoreUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *KeyValueStoreMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (kvsuo *KeyValueStoreUpdateOne) SetUpdatedAt(i int64) *KeyValueStoreUpdateOne {
	kvsuo.mutation.ResetUpdatedAt()
	kvsuo.mutation.SetUpdatedAt(i)
	return kvsuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (kvsuo *KeyValueStoreUpdateOne) AddUpdatedAt(i int64) *KeyValueStoreUpdateOne {
	kvsuo.mutation.AddUpdatedAt(i)
	return kvsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (kvsuo *KeyValueStoreUpdateOne) ClearUpdatedAt() *KeyValueStoreUpdateOne {
	kvsuo.mutation.ClearUpdatedAt()
	return kvsuo
}

// SetKey sets the "key" field.
func (kvsuo *KeyValueStoreUpdateOne) SetKey(s string) *KeyValueStoreUpdateOne {
	kvsuo.mutation.SetKey(s)
	return kvsuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (kvsuo *KeyValueStoreUpdateOne) SetNillableKey(s *string) *KeyValueStoreUpdateOne {
	if s != nil {
		kvsuo.SetKey(*s)
	}
	return kvsuo
}

// SetValue sets the "value" field.
func (kvsuo *KeyValueStoreUpdateOne) SetValue(b []byte) *KeyValueStoreUpdateOne {
	kvsuo.mutation.SetValue(b)
	return kvsuo
}

// ClearValue clears the value of the "value" field.
func (kvsuo *KeyValueStoreUpdateOne) ClearValue() *KeyValueStoreUpdateOne {
	kvsuo.mutation.ClearValue()
	return kvsuo
}

// Mutation returns the KeyValueStoreMutation object of the builder.
func (kvsuo *KeyValueStoreUpdateOne) Mutation() *KeyValueStoreMutation {
	return kvsuo.mutation
}

// Where appends a list predicates to the KeyValueStoreUpdate builder.
func (kvsuo *KeyValueStoreUpdateOne) Where(ps ...predicate.KeyValueStore) *KeyValueStoreUpdateOne {
	kvsuo.mutation.Where(ps...)
	return kvsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kvsuo *KeyValueStoreUpdateOne) Select(field string, fields ...string) *KeyValueStoreUpdateOne {
	kvsuo.fields = append([]string{field}, fields...)
	return kvsuo
}

// Save executes the query and returns the updated KeyValueStore entity.
func (kvsuo *KeyValueStoreUpdateOne) Save(ctx context.Context) (*KeyValueStore, error) {
	kvsuo.defaults()
	return withHooks(ctx, kvsuo.sqlSave, kvsuo.mutation, kvsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kvsuo *KeyValueStoreUpdateOne) SaveX(ctx context.Context) *KeyValueStore {
	node, err := kvsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kvsuo *KeyValueStoreUpdateOne) Exec(ctx context.Context) error {
	_, err := kvsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kvsuo *KeyValueStoreUpdateOne) ExecX(ctx context.Context) {
	if err := kvsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kvsuo *KeyValueStoreUpdateOne) defaults() {
	if _, ok := kvsuo.mutation.UpdatedAt(); !ok && !kvsuo.mutation.UpdatedAtCleared() {
		v := keyvaluestore.UpdateDefaultUpdatedAt()
		kvsuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (kvsuo *KeyValueStoreUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *KeyValueStoreUpdateOne {
	kvsuo.modifiers = append(kvsuo.modifiers, modifiers...)
	return kvsuo
}

func (kvsuo *KeyValueStoreUpdateOne) sqlSave(ctx context.Context) (_node *KeyValueStore, err error) {
	_spec := sqlgraph.NewUpdateSpec(keyvaluestore.Table, keyvaluestore.Columns, sqlgraph.NewFieldSpec(keyvaluestore.FieldID, field.TypeInt))
	id, ok := kvsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KeyValueStore.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kvsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keyvaluestore.FieldID)
		for _, f := range fields {
			if !keyvaluestore.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keyvaluestore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kvsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if kvsuo.mutation.CreatedAtCleared() {
		_spec.ClearField(keyvaluestore.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := kvsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(keyvaluestore.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := kvsuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(keyvaluestore.FieldUpdatedAt, field.TypeInt64, value)
	}
	if kvsuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(keyvaluestore.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := kvsuo.mutation.Key(); ok {
		_spec.SetField(keyvaluestore.FieldKey, field.TypeString, value)
	}
	if value, ok := kvsuo.mutation.Value(); ok {
		_spec.SetField(keyvaluestore.FieldValue, field.TypeBytes, value)
	}
	if kvsuo.mutation.ValueCleared() {
		_spec.ClearField(keyvaluestore.FieldValue, field.TypeBytes)
	}
	_spec.AddModifiers(kvsuo.modifiers...)
	_node = &KeyValueStore{config: kvsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kvsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keyvaluestore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kvsuo.mutation.done = true
	return _node, nil
}

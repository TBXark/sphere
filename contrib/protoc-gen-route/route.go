package main

import (
	"github.com/tbxark/options-proto/go/tbxark/options"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
	"os"
	"strings"
	"unicode"
)

const (
	deprecationComment = "// Deprecated: Do not use."
)

const (
	contextPackage = protogen.GoImportPath("context")
)

var methodSets = make(map[string]int)

func generateFile(gen *protogen.Plugin, file *protogen.File, conf *Config) *protogen.GeneratedFile {
	if len(file.Services) == 0 || (!hasOptionsRule(file.Services, conf.optionsKey)) {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + conf.genFileSuffix
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-route. DO NOT EDIT.")
	g.P("// versions:")
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	if conf.templateFile != "" {
		raw, err := os.ReadFile(conf.templateFile)
		if err != nil {
			gen.Error(err)
			return nil
		}
		routeTemplate = string(raw)
	}
	generateFileContent(gen, file, g, conf)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, conf *Config) {
	if len(file.Services) == 0 {
		return
	}
	g.P("var _ = new(", contextPackage.Ident("Context"), ")")
	g.P("var _ = new(", conf.requestType.GoIdent(), ")")
	g.P("var _ = new(", conf.responseType.GoIdent(), ")")
	g.P("var _ = new(", conf.extraType.GoIdent(), ")")
	g.P("var _ = ", conf.extraConstructor.GoIdent())
	g.P()
	for _, service := range file.Services {
		genService(gen, file, g, service, conf)
	}
}

func genService(_ *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, conf *Config) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	sd := &serviceDesc{
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Metadata:    file.Desc.Path(),

		OptionsKey:   pascalCase(conf.optionsKey),
		RequestType:  g.QualifiedGoIdent(conf.requestType.GoIdent()),
		ResponseType: g.QualifiedGoIdent(conf.responseType.GoIdent()),
	}
	if conf.extraType != nil {
		sd.ExtraDataType = g.QualifiedGoIdent(conf.extraType.GoIdent())
		sd.NewExtraDataFunc = g.QualifiedGoIdent(conf.extraConstructor.GoIdent())
	}

	for _, method := range service.Methods {
		rule := extractOptionsRule(method, conf.optionsKey)
		if rule == nil {
			continue
		}
		sd.Methods = append(sd.Methods, &methodDesc{
			Name:         method.GoName,
			OriginalName: string(method.Desc.Name()),
			Num:          methodSets[method.GoName],
			Request:      method.Input.GoIdent.GoName,
			Reply:        method.Output.GoIdent.GoName,
			Comment:      method.Comments.Leading.String(),
			Extra:        rule.Extra,
		})
		methodSets[method.GoName] += 1
	}
	if len(sd.Methods) != 0 {
		g.P(sd.execute())
	}
}

func hasOptionsRule(services []*protogen.Service, key string) bool {
	for _, service := range services {
		for _, method := range service.Methods {
			if extractOptionsRule(method, key) != nil {
				return true
			}
		}
	}
	return false
}

func extractOptionsRule(method *protogen.Method, key string) *options.KeyValuePair {
	if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
		return nil
	}
	rules, ok := proto.GetExtension(method.Desc.Options(), options.E_Options).([]*options.KeyValuePair)
	if rules == nil || !ok {
		return nil
	}
	for _, rule := range rules {
		if rule.GetKey() == key {
			return rule
		}
	}
	return nil
}

func pascalCase(s string) string {
	words := strings.FieldsFunc(s, func(r rune) bool {
		return r == ' ' || r == '_' || r == '-'
	})
	if len(words) == 0 {
		return ""
	}
	result := ""
	for i := 0; i < len(words); i++ {
		word := words[i]
		if word == "" {
			continue
		}
		word = strings.ToLower(word)
		word = string(unicode.ToUpper(rune(word[0]))) + word[1:]
		result += word
	}
	return result
}

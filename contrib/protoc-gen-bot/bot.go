package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
	"regexp"
	"strings"
)

const deprecationComment = "// Deprecated: Do not use."

const (
	contextPackage = protogen.GoImportPath("context")
)

var methodSets = make(map[string]int)

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 || (!hasBotRule(file.Services)) {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_bot.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-sphere. DO NOT EDIT.")
	g.P("// versions:")
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	g.P("var _ = new(", contextPackage.Ident("Context"), ")")
	g.P()

	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

func genService(_ *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	// HTTP Server.
	sd := &serviceDesc{
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Metadata:    file.Desc.Path(),
	}
	for _, method := range service.Methods {
		sd.Methods = append(sd.Methods, &methodDesc{
			Name:         method.GoName,
			OriginalName: string(method.Desc.Name()),
			Num:          methodSets[method.GoName],
			Request:      method.Input.GoIdent.GoName,
			Reply:        method.Output.GoIdent.GoName,
			Comment:      method.Comments.Leading.String(),
		})
		methodSets[method.GoName] += 1
	}
	if len(sd.Methods) != 0 {
		g.P(sd.execute())
	}
}

var botTagsMatchRegexp = regexp.MustCompile(` *//+ *@bot`)

func hasBotRule(services []*protogen.Service) bool {
	for _, service := range services {
		for _, line := range strings.Split(service.Comments.Leading.String(), "\n") {
			if botTagsMatchRegexp.MatchString(line) {
				return true
			}
		}
	}
	return false
}

package main

import (
	"fmt"
	"net/http"
	"os"
	"regexp"
	"slices"
	"strings"

	validatepb "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	"github.com/TBXark/sphere/contrib/sphere-shared/tags"
	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	ctxPackage      = protogen.GoImportPath("context")
	validatePackage = protogen.GoImportPath("github.com/bufbuild/protovalidate-go")
)

const deprecationComment = "// Deprecated: Do not use."

var methodSets = make(map[string]int)

type genConfig struct {
	omitempty       bool
	omitemptyPrefix string
	swaggerAuth     string
	packageDesc     *packageDesc
}

// generateFile generates a _http.pb.go file containing sphere errors definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File, conf *Config) *protogen.GeneratedFile {
	if len(file.Services) == 0 || (conf.omitempty && !hasHTTPRule(file.Services)) {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_sphere.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	genBaseFileHeader(gen, file, g)
	replaceTemplateIfNeed(conf)
	generateFileContent(gen, file, g, conf)
	return g
}

func genBaseFileHeader(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	g.P("// Code generated by protoc-gen-sphere. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
}

// generateFileContent generates the sphere errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, conf *Config) {
	if len(file.Services) == 0 {
		return
	}
	g.P("var _ = new(", ctxPackage.Ident("Context"), ")")
	genConf := newGenConf(g, conf)
	genGoImport(file, g, conf, genConf)
	g.P()
	for _, service := range file.Services {
		genService(gen, file, g, service, genConf)
	}
}

func genGoImport(file *protogen.File, g *protogen.GeneratedFile, conf *Config, genConf *genConfig) {
	idents := []*GoIdent{
		conf.routerType,
		conf.contextType,
		conf.errorRespType,
		conf.dataRespType,
		conf.serverHandlerFunc,
		conf.parseJsonFunc,
		conf.parseUriFunc,
		conf.parseFormFunc,
	}
	genericGen := func(i int) string {
		if i == 0 {
			return ""
		}
		var sb strings.Builder
		sb.WriteString("[")
		for j := 0; j < i; j++ {
			if j > 0 {
				sb.WriteString(",")
			}
			sb.WriteString("string")
		}
		sb.WriteString("]")
		return sb.String()
	}
	imported := make(map[string]struct{}, len(idents))
	for _, i := range idents {
		_, exist := imported[string(i.pkg)]
		if !exist {
			if i.isFunc {
				g.P("var _ = ", i.GoIdent())
			} else {
				g.P("var _ = new(", i.GoIdent(), genericGen(i.genericCount), ")")
			}
			imported[string(i.pkg)] = struct{}{}
		}
	}

LOOP:
	for _, service := range file.Services {
		for _, method := range service.Methods {
			if slices.ContainsFunc(method.Input.Fields, hasValidateOptions) {
				// import protovalidate package when the service has a validate option
				g.P("var _ = new(", validatePackage.Ident("Validator"), ")")
				genConf.packageDesc.ValidateFunc = g.QualifiedGoIdent(validatePackage.Ident("Validate"))
				break LOOP
			}
		}
	}
}

func genService(_ *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, conf *genConfig) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	// HTTP Server.
	sd := &serviceDesc{
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Metadata:    file.Desc.Path(),
		Package:     conf.packageDesc,
	}
	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if rule != nil && ok {
			for _, bind := range rule.AdditionalBindings {
				sd.Methods = append(sd.Methods, buildHTTPRule(g, service, method, bind, conf))
			}
			sd.Methods = append(sd.Methods, buildHTTPRule(g, service, method, rule, conf))
		} else if !conf.omitempty {
			path := fmt.Sprintf("%s/%s/%s", conf.omitemptyPrefix, service.Desc.FullName(), method.Desc.Name())
			sd.Methods = append(sd.Methods, buildMethodDesc(g, method, http.MethodPost, path, conf))
		}
	}
	if len(sd.Methods) != 0 {
		g.P(sd.execute())
	}
}

func hasHTTPRule(services []*protogen.Service) bool {
	for _, service := range services {
		for _, method := range service.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}
			rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
			if rule != nil && ok {
				return true
			}
		}
	}
	return false
}

func hasValidateOptions(field *protogen.Field) bool {
	opts := field.Desc.Options().(*descriptorpb.FieldOptions)
	return proto.HasExtension(opts, validatepb.E_Field)
}

func buildHTTPRule(g *protogen.GeneratedFile, service *protogen.Service, m *protogen.Method, rule *annotations.HttpRule, conf *genConfig) *methodDesc {
	var (
		path         string
		method       string
		body         string
		responseBody string
	)

	switch pattern := rule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = http.MethodGet
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = http.MethodPut
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = http.MethodPost
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = http.MethodDelete
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = http.MethodPatch
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.Path
		method = pattern.Custom.Kind
	}
	if method == "" {
		method = http.MethodPost
	}
	if path == "" {
		path = fmt.Sprintf("%s/%s/%s", conf.omitemptyPrefix, service.Desc.FullName(), m.Desc.Name())
	}
	body = rule.Body
	responseBody = rule.ResponseBody
	md := buildMethodDesc(g, m, method, path, conf)
	if method == http.MethodGet || method == http.MethodDelete {
		if body != "" {
			_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: %s %s body should not be declared.\n", method, path)
		}
	} else {
		if body == "" {
			_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: %s %s does not declare a body.\n", method, path)
		}
	}
	if body == "*" {
		md.HasBody = true
		md.Body = ""
	} else if body != "" {
		md.HasBody = true
		md.Body = "." + camelCaseVars(body)
	} else {
		md.HasBody = false
	}
	if responseBody == "*" {
		md.ResponseBody = ""
	} else if responseBody != "" {
		md.ResponseBody = "." + camelCaseVars(responseBody)
	}
	return md
}

func buildMethodDesc(g *protogen.GeneratedFile, m *protogen.Method, method, path string, conf *genConfig) *methodDesc {
	defer func() { methodSets[m.GoName]++ }()

	vars, uris := buildPathVars(path)
	forms := buildQueryParams(m, method, vars)

	for v, s := range vars {
		if s != nil {
			path = replacePath(v, *s, path)
		}
		checkPathVarsType(m, v, path)
	}

	comment := buildMethodCommend(m)
	if comment != "" {
		comment = "// " + m.GoName + strings.TrimPrefix(strings.TrimSuffix(comment, "\n"), "//")
	}
	return &methodDesc{
		Name:         m.GoName,
		OriginalName: string(m.Desc.Name()),
		Num:          methodSets[m.GoName],
		Request:      g.QualifiedGoIdent(m.Input.GoIdent),
		Reply:        g.QualifiedGoIdent(m.Output.GoIdent),
		Comment:      comment,
		Path:         path,
		Method:       method,
		HasVars:      len(vars) > 0,
		HasQuery:     len(forms) > 0,
		GinPath:      buildGinRoutePath(path),
		Swagger:      buildSwaggerAnnotations(m, method, buildSwaggerPath(path), uris, forms, conf),
		NeedValidate: slices.ContainsFunc(m.Input.Fields, hasValidateOptions),
	}
}

func buildPathVars(path string) (map[string]*string, []string) {
	if strings.HasSuffix(path, "/") {
		_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: Path %s should not end with \"/\" \n", path)
	}
	pattern := regexp.MustCompile(`(?i){([a-z.0-9_\s]*)=?([^{}]*)}`)
	matches := pattern.FindAllStringSubmatch(path, -1)
	res := make(map[string]*string, len(matches))
	vars := make([]string, 0, len(matches)) // keep the order of path variables
	for _, m := range matches {
		name := strings.TrimSpace(m[1])
		if len(name) > 1 && len(m[2]) > 0 {
			res[name] = &m[2]
		} else {
			res[name] = nil
		}
		vars = append(vars, name)
	}
	return res, vars
}

func findQueryParam(comment, defaultName string) string {
	items := tags.NewSphereTagItems(comment, defaultName)
	for _, item := range items {
		if item.Key != "form" {
			value := strings.Trim(item.Value, " \"")
			return strings.Split(value, ",")[0]
		}
	}
	return ""
}

func buildQueryParams(m *protogen.Method, method string, pathVars map[string]*string) []string {
	var res []string
	for _, field := range m.Input.Fields {
		name := string(field.Desc.Name())
		if _, ok := pathVars[name]; ok {
			continue
		}
		formName := ""
		if field.Comments.Leading.String() != "" {
			if n := findQueryParam(string(field.Comments.Leading), name); n != "" {
				formName = n
			}
		}
		if field.Comments.Trailing.String() != "" && formName == "" {
			if n := findQueryParam(string(field.Comments.Trailing), name); n != "" {
				formName = n
			}
		}
		if formName != "" {
			res = append(res, formName)
		} else if method == http.MethodGet || method == http.MethodDelete {
			// All fields are query parameters for GET and DELETE methods except for path parameters
			res = append(res, name)
			continue
		}
	}
	return res
}

func buildSwaggerAnnotations(m *protogen.Method, method, path string, pathVars []string, queryVars []string, conf *genConfig) string {
	var builder strings.Builder

	if idx := strings.Index(path, "?"); idx > 0 {
		path = path[:idx]
	}

	builder.WriteString("// @Summary " + string(m.Desc.Name()) + "\n")
	desc := buildMethodCommend(m)
	if desc != "" {
		desc = strings.TrimSpace(strings.TrimPrefix(strings.TrimSuffix(desc, "\n"), "//"))
		builder.WriteString("// @Description " + desc + "\n")
	}
	builder.WriteString("// @Tags " + string(m.Parent.Desc.ParentFile().Package()) + "\n")
	builder.WriteString("// @Accept json\n")
	builder.WriteString("// @Produce json\n")

	if conf.swaggerAuth != "" {
		builder.WriteString(conf.swaggerAuth + "\n")
	}

	// Add path parameters
	for _, param := range pathVars {
		paramType := buildSwaggerParamType(m.Input.Desc, param)
		builder.WriteString(fmt.Sprintf("// @Param %s path %s true \"%s\"\n", param, paramType, param))
	}

	// Add query parameters
	for _, param := range queryVars {
		paramType := buildSwaggerParamType(m.Input.Desc, param)
		required := getFieldRequired(m.Input.Desc, param)
		builder.WriteString(fmt.Sprintf("// @Param %s query %s %v \"%s\"\n", param, paramType, required, param))
	}

	// Add request body
	if !(method == http.MethodGet || method == http.MethodDelete) {
		builder.WriteString("// @Param request body " + m.Input.GoIdent.GoName + " true \"request body\"\n")
	}

	builder.WriteString("// @Success 200 {object} " + conf.packageDesc.DataResponseType + "[" + m.Output.GoIdent.GoName + "]\n")
	builder.WriteString("// @Failure 400,401,403,500,default {object} " + conf.packageDesc.ErrorResponseType + "\n")
	builder.WriteString("// @Router " + path + " [" + strings.ToLower(method) + "]\n")
	return builder.String()
}

func buildSwaggerParamType(messageDesc protoreflect.MessageDescriptor, fieldName string) string {
	field := messageDesc.Fields().ByName(protoreflect.Name(fieldName))
	if field == nil {
		return "string" // Default to string if field not found
	}
	switch field.Kind() {
	case protoreflect.BoolKind:
		return "boolean"
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Uint32Kind,
		protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Uint64Kind,
		protoreflect.Sfixed32Kind, protoreflect.Fixed32Kind,
		protoreflect.Sfixed64Kind, protoreflect.Fixed64Kind:
		return "integer"
	case protoreflect.FloatKind, protoreflect.DoubleKind:
		return "number"
	case protoreflect.StringKind:
		return "string"
	case protoreflect.BytesKind:
		return "string" // Swagger doesn't have a specific type for bytes, so we use string
	case protoreflect.EnumKind:
		return "string" // Enums are typically represented as strings in HTTP APIs
	case protoreflect.MessageKind:
		return "object"
	default:
		return "any"
	}
}

func getFieldRequired(messageDesc protoreflect.MessageDescriptor, fieldName string) bool {
	field := messageDesc.Fields().ByName(protoreflect.Name(fieldName))
	if field == nil {
		return false
	}
	opts := field.Options()
	if opts == nil {
		return false
	}
	if proto.HasExtension(opts, validatepb.E_Field) {
		fieldConstraints := proto.GetExtension(opts, validatepb.E_Field).(*validatepb.FieldRules)
		if fieldConstraints != nil {
			return fieldConstraints.GetRequired()
		}
	}
	return false
}

func buildGinRoutePath(protoPath string) string {
	if idx := strings.Index(protoPath, "?"); idx > 0 {
		protoPath = protoPath[:idx]
	}
	// 1. {name:pattern} -> *name
	// 2. {name} -> :name

	// replace pattern vars
	colonVarRe := regexp.MustCompile(`{([^:]+):([^}]*)}`)
	protoPath = colonVarRe.ReplaceAllString(protoPath, "*$1")

	// replace simple vars
	simpleVarRe := regexp.MustCompile(`{([^}]+)}`)
	protoPath = simpleVarRe.ReplaceAllString(protoPath, ":$1")

	return protoPath
}

func buildSwaggerPath(protoPath string) string {
	if idx := strings.Index(protoPath, "?"); idx > 0 {
		protoPath = protoPath[:idx]
	}

	// replace pattern vars
	colonVarRe := regexp.MustCompile(`{([^:]+):([^}]*)}`)
	protoPath = colonVarRe.ReplaceAllString(protoPath, "{$1}")

	// replace simple vars
	simpleVarRe := regexp.MustCompile(`{([^}]+)}`)
	protoPath = simpleVarRe.ReplaceAllString(protoPath, "{$1}")

	return protoPath
}

func buildMethodCommend(m *protogen.Method) string {
	leading := m.Comments.Leading.String()
	if leading == "" {
		return ""
	}
	return strings.TrimSpace(strings.ReplaceAll(leading, "\n", " "))
}

// replacePath {paramName=value} => {paramName:newValue}
func replacePath(name string, value string, path string) string {
	pattern := regexp.MustCompile(fmt.Sprintf(`(?i){([\s]*%s\b[\s]*)=?([^{}]*)}`, name))
	idx := pattern.FindStringIndex(path)
	if len(idx) > 0 {
		path = fmt.Sprintf("%s{%s:%s}%s",
			path[:idx[0]], // The start of the match
			name,
			strings.ReplaceAll(value, "*", ".*"),
			path[idx[1]:],
		)
	}
	return path
}

func checkPathVarsType(m *protogen.Method, v string, path string) {
	fields := m.Input.Desc.Fields()
	for _, field := range strings.Split(v, ".") {
		if strings.TrimSpace(field) == "" {
			continue
		}
		if strings.Contains(field, ":") {
			field = strings.Split(field, ":")[0]
		}
		fd := fields.ByName(protoreflect.Name(field))
		if fd == nil {
			_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mERROR\u001B[m: The corresponding field '%s' declaration in message could not be found in '%s'\n", v, path)
			os.Exit(2)
		}
		if fd.IsMap() {
			_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: The field in path:'%s' shouldn't be a map.\n", v)
		} else if fd.IsList() {
			_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: The field in path:'%s' shouldn't be a list.\n", v)
		} else if fd.Kind() == protoreflect.MessageKind || fd.Kind() == protoreflect.GroupKind {
			fields = fd.Message().Fields()
		}
	}
}

func newGenConf(g *protogen.GeneratedFile, conf *Config) *genConfig {
	pkgDesc := &packageDesc{
		RouterType:               g.QualifiedGoIdent(conf.routerType.GoIdent()),
		ContextType:              g.QualifiedGoIdent(conf.contextType.GoIdent()),
		ErrorResponseType:        g.QualifiedGoIdent(conf.errorRespType.GoIdent()),
		DataResponseType:         g.QualifiedGoIdent(conf.dataRespType.GoIdent()),
		ServerHandlerWrapperFunc: g.QualifiedGoIdent(conf.serverHandlerFunc.GoIdent()),
		ParseJsonFunc:            g.QualifiedGoIdent(conf.parseJsonFunc.GoIdent()),
		ParseUriFunc:             g.QualifiedGoIdent(conf.parseUriFunc.GoIdent()),
		ParseFormFunc:            g.QualifiedGoIdent(conf.parseFormFunc.GoIdent()),
	}
	genConf := &genConfig{
		omitempty:       conf.omitempty,
		omitemptyPrefix: conf.omitemptyPrefix,
		swaggerAuth:     conf.swaggerAuth,
		packageDesc:     pkgDesc,
	}
	return genConf
}

func replaceTemplateIfNeed(conf *Config) {
	if conf.templateFile != "" {
		raw, err := os.ReadFile(conf.templateFile)
		if err != nil {
			_, _ = fmt.Fprintf(os.Stderr, "read template file error: %v\n", err)
			os.Exit(2)
		}
		httpTemplate = string(raw)
	}
}
